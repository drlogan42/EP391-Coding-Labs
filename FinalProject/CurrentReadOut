// This program reads the output of an op-amp connected to a 1Ω shunt,
// amplifies it (via hardware), then computes and displays the current over UART.

#define F_CPU 1000000UL
#define UART_UBRR_VALUE 12UL  // 9600 baud
#define REFERENCEVOLTAGE 5.0  // ADC reference (AVCC)
#define SHUNT_RESISTANCE 1.0  // 1Ω shunt
#define AMPLIFIER_GAIN 11.0   // Set based on resistor values: 1 + (Rf / Rin)

#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>

// Function Prototypes
void adc_init(void);
void uart_init(void);
void write_uart(char* c);
uint16_t analog(uint8_t channel);
void send_current(float current);

// ---------- MAIN ----------
int main(void) {
	uart_init();	// Initialize UART
	adc_init();		// Initialize ADC

	while (1) {
		uint16_t adc_val = analog(1);	// Read from ADC1 (amplifier output)

		// Convert ADC value to amplified voltage
		float v_amplified = (adc_val / 1023.0) * REFERENCEVOLTAGE;

		// Recover actual shunt voltage by dividing by gain
		float v_shunt = v_amplified / AMPLIFIER_GAIN;

		// Calculate current: I = V / R
		float current = v_shunt / SHUNT_RESISTANCE;

		send_current(current);

		_delay_ms(500);	// Delay for readability
	}
	return 0;
}

// ---------- UART Init ----------
void uart_init(void) {
	UBRR0H = (uint8_t)(UART_UBRR_VALUE >> 8);
	UBRR0L = (uint8_t)(UART_UBRR_VALUE);
	UCSR0A |= (1 << U2X0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
	UCSR0B = (1 << TXEN0);
}

// ---------- UART Write ----------
void write_uart(char* c) {
	while (*c) {
		while (!(UCSR0A & (1 << UDRE0)));
		UDR0 = *c++;
	}
}

// ---------- ADC Init ----------
void adc_init(void) {
	ADMUX = (1 << REFS0); // AVCC reference
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0); // Enable ADC, prescaler 8
}

// ---------- ADC Read ----------
uint16_t analog(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F); // Select channel
	ADCSRA |= (1 << ADSC);                    // Start conversion
	while (ADCSRA & (1 << ADSC));             // Wait for conversion
	return ADC;                               // Return 10-bit result
}

// ---------- Send Current ----------
void send_current(float current) {
	char buffer[32];
	dtostrf(current, 2, 4, buffer);  // Format float to string
	write_uart("Current: ");
	write_uart(buffer);
	write_uart(" A\r\n");
}
