// This program turns on an LED connected to PC0 to create a measurable load,
// reads the current across a 1Î© shunt using ADC1 and ADC2, and sends the value over UART.

#define F_CPU 1000000UL
#define UART_UBRR_VALUE 12UL
#define REFERENCEVOLTAGE 5.0
#define SHUNT_RESISTANCE 1.0

#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>

// Function Prototypes
void adc_init(void);
void uart_init(void);
void write_uart(char* c);
uint16_t analog(uint8_t channel);
void send_current(float current);
void load_init(void);

// ----------- MAIN ------------
int main(void) {
	uart_init();
	adc_init();
	load_init();	// Set up LED pin

	while (1) {
		// Turn on the LED load (set PC0 HIGH)
		PORTC |= (1 << PC0);

		// Read voltages across shunt
		uint16_t adc_val_top = analog(1);	// ADC1
		uint16_t adc_val_bottom = analog(2); // ADC2

		float v_top = (adc_val_top / 1023.0) * REFERENCEVOLTAGE;
		float v_bottom = (adc_val_bottom / 1023.0) * REFERENCEVOLTAGE;
		float v_shunt = v_top - v_bottom;
		float current = v_shunt / SHUNT_RESISTANCE;

		send_current(current);

		_delay_ms(500);
	}
	return 0;
}

// ---------- LED Load Init ------------
void load_init(void) {
	DDRC |= (1 << PC0);	// Set PC0 (pin 23) as output
}

// ---------- UART Init ----------
void uart_init(void) {
	UBRR0H = (uint8_t)(UART_UBRR_VALUE >> 8);
	UBRR0L = (uint8_t)(UART_UBRR_VALUE);
	UCSR0A |= (1 << U2X0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
	UCSR0B = (1 << TXEN0);
}

// ---------- Write UART ----------
void write_uart(char* c) {
	while (*c) {
		while (!(UCSR0A & (1 << UDRE0)));
		UDR0 = *c++;
	}
}

// ---------- ADC Init ----------
void adc_init(void) {
	ADMUX = (1 << REFS0);
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0);
}

// ---------- ADC Read ----------
uint16_t analog(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
	ADCSRA |= (1 << ADSC);
	while (ADCSRA & (1 << ADSC));
	return ADC;
}

// ---------- Send Current ----------
void send_current(float current) {
	char buffer[32];
	dtostrf(current, 2, 4, buffer);
	write_uart("Current: ");
	write_uart(buffer);
	write_uart(" A\r\n");
}
