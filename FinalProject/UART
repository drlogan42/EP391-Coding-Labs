#define F_CPU 1000000UL
#define UART_UBRR_VALUE 12UL  // For 9600 baud with U2X0 = 1

#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>

// --------- Function Prototypes ----------
void uart_init(void);
void write_uart(char* c);
void adc_init(void);
uint16_t analog(uint8_t channel);

// ---------- MAIN ----------
int main(void) {
    uart_init();
    adc_init();

    while (1) {
        uint16_t adc_val = analog(0);  // Read from ADC0 (PA0)

        if (adc_val > 900) {
            write_uart("5V Present\r\n");
        } else {
            write_uart("No Voltage\r\n");
        }

        _delay_ms(1000);
    }

    return 0;
}

// ---------- UART SETUP ----------
void uart_init(void) {
    UBRR0H = (uint8_t)(UART_UBRR_VALUE >> 8);
    UBRR0L = (uint8_t)(UART_UBRR_VALUE);
    UCSR0A |= (1 << U2X0);  // Double speed
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  // 8 data bits, no parity, 1 stop bit
    UCSR0B = (1 << TXEN0);  // Enable TX
}

// ---------- UART SEND ----------
void write_uart(char* c) {
    while (*c) {
        while (!(UCSR0A & (1 << UDRE0)));  // Wait until buffer is empty
        UDR0 = *c++;
    }
}

// ---------- ADC SETUP ----------
void adc_init(void) {
    ADMUX = (1 << REFS0);  // AVCC as reference
    ADCSRA = (1 << ADEN)                 // Enable ADC
           | (1 << ADPS1) | (1 << ADPS0); // Prescaler = 8 (1 MHz / 8 = 125 kHz)
}

// ---------- ADC READ ----------
uint16_t analog(uint8_t channel) {
    ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);  // Select ADC channel
    ADCSRA |= (1 << ADSC);                     // Start conversion
    while (ADCSRA & (1 << ADSC));              // Wait for conversion to finish
    return ADC;                                // Return 10-bit result
}
